- path: ${NODE_SCRIPTS_PATH}/utils/generatePoolCertificateTransaction.sh
  permissions: "550"
  content: |
    #!/bin/bash

    function messageSignTransaction() {
    cat <<EOF

    The transaction to register your pool certificate needs to be signed. You'll need to do this on your cold machine.

    1.) Download the files from /home/${NODE_USER}/step-4.zip to your cold environment.

    Inside will be the following files:
    - tx-pool-cert.raw
    - step-4.sh 
    - step-4.txt

    2.) Move all the files into the directory you are generating your keys with.
    3.) Execute 'step-4.sh', this will sign the transaction and generate one file.
    4.) Upload the generated file 'tx-pool-cert.signed' into /home/${NODE_USER}/

    EOF
    }

    function doSubmitTransaction(){
      # Submit
      submitTransaction=$( cardano-cli transaction submit \
          --tx-file /home/${NODE_USER}/tx-pool-cert.signed \
          ${NODE_NETWORK_FLAG} 2>&1 )

        if [[ $submitTransaction == 'Transaction successfully submitted.' ]]; then
          msg "${G}Transaction successfully submitted.${N}"
          mv /home/${NODE_USER}/pool.cert ${NODE_PRIVATE_PATH}/pool.cert 
        else
          # Error with transaction
          msg "${R}Error submitting transaction${N}"
          return
          # TODO: Logging
        fi

        # Cleanup
        rm -rf /home/${NODE_USER}/tx-pool-cert.signed
        rm -rf /home/${NODE_USER}/step-4.zip
    }

    includeDeposit=false

    while [[ $# -gt 0 ]]; do
      key="$1"
      case $key in
        --includeDeposit)
          includeDeposit=true
          shift
          ;;
      esac
    done

    if [ ! -f /home/${NODE_USER}/pool.cert ]; then
      msg "Missing /home/${NODE_USER}/pool.cert"
      return
    fi

    if [ ! -f ${NODE_PRIVATE_PATH}/deleg.cert ]; then
      msg "Missing ${NODE_PRIVATE_PATH}/deleg.cert"
      return
    fi

    # If signed transaction exists, try to submit it.
    if [ -f /home/${NODE_USER}/tx-pool-cert.signed ]; then
      doSubmitTransaction
      return
    fi

    total_balance=$(. ${NODE_SCRIPTS_PATH}/getTxInfo.sh | jq -r '.balance')

    stakePoolDeposit=$(cat ${NODE_HOME}/params.json | jq -r '.stakePoolDeposit')

    if ! $includeDeposit; then 
      stakePoolDeposit=0
    fi 

    if [ ${stakePoolDeposit} -gt 1 ] && [ ${total_balance} -lt ${stakePoolDeposit} ]; then
      echo "No ADA. You need to send funds to your payment address to register pool certificate."
      echo "Send at least 505 ADA to $(cat ${NODE_PRIVATE_PATH}/payment.addr)"
      return
    fi

    currentSlot=$(. ${NODE_SCRIPTS_PATH}/getTxInfo.sh | jq -r '.slotNumber')
    tx_in=$(. ${NODE_SCRIPTS_PATH}/getTxInfo.sh | jq -r '.txIn')
    txcnt=$(. ${NODE_SCRIPTS_PATH}/getTxInfo.sh | jq -r '.txCnt')

    # Build transaction
    buildRawTransaction=$(cardano-cli transaction build-raw \
        ${tx_in} \
        --tx-out $(cat ${NODE_PRIVATE_PATH}/payment.addr)+$(( ${total_balance} - ${stakePoolDeposit}))  \
        --invalid-hereafter $(( ${currentSlot} + 10000)) \
        --fee 0 \
        --certificate-file /home/${NODE_USER}/pool.cert \
        --certificate-file ${NODE_PRIVATE_PATH}/deleg.cert \
        --out-file /home/${NODE_USER}/tx-pool-cert.tmp  2>&1 )

    if [ ! -f /home/${NODE_USER}/tx-pool-cert.tmp ]; then
        echo "Error generating transaction. Make sure you have ADA."
        return
    fi

    fee=$(cardano-cli transaction calculate-min-fee \
        --tx-body-file /home/${NODE_USER}/tx-pool-cert.tmp \
        --tx-in-count ${txcnt} \
        --tx-out-count 1 \
        ${NODE_NETWORK_FLAG} \
        --witness-count 3 \
        --byron-witness-count 0 \
        --protocol-params-file ${NODE_HOME}/params.json | awk '{ print $1 }'  2>&1 )

    txOut=$((${total_balance}-${stakePoolDeposit}-${fee}))

    cardano-cli transaction build-raw \
        ${tx_in} \
        --tx-out $(cat ${NODE_PRIVATE_PATH}/payment.addr)+${txOut} \
        --invalid-hereafter $(( ${currentSlot} + 10000)) \
        --fee ${fee} \
        --certificate-file /home/${NODE_USER}/pool.cert \
        --certificate-file ${NODE_PRIVATE_PATH}/deleg.cert \
        --out-file /home/${NODE_USER}/tx-pool-cert.raw


    # Generate file to download and run on cold machine
    if [ ! -f /home/${NODE_USER}/step-4.sh ]; then
      cat > /home/${NODE_USER}/step-4.sh << EOF 
        #!/bin/bash
        cardano-cli transaction sign \\
          --tx-body-file tx-pool-cert.raw \\
          --signing-key-file payment.skey \\
          --signing-key-file node.skey \\
          --signing-key-file stake.skey \\
          ${NODE_NETWORK_FLAG} \\
          --out-file tx-pool-cert.signed

        echo "Upload tx-pool-cert.signed into /home/${NODE_USER}/"
    EOF
    chmod +x /home/${NODE_USER}/step-4.sh
    fi

    # Generate file for step 4 instructions
    if [ ! -f /home/${NODE_USER}/step-4.txt ]; then
      echo $(messageSignTransaction) > /home/${NODE_USER}/step-4.txt
    fi 

    # zip whats needed to transfer to cold machine
    zip -q -j \
      /home/${NODE_USER}/step-4.zip \
      /home/${NODE_USER}/tx-pool-cert.raw \
      /home/${NODE_USER}/step-4.sh \
      /home/${NODE_USER}/step-4.txt

    # Cleanup
    rm -rf /home/${NODE_USER}/step-4.sh
    rm -rf /home/${NODE_USER}/step-4.txt
    rm -rf /home/${NODE_USER}/tx-pool-cert.tmp
    rm -rf /home/${NODE_USER}/tx-pool-cert.raw

    # Output instructions
    if [ ! -f /home/${NODE_USER}/tx-pool-cert.signed ]; then

      messageSignTransaction

      RUN=true
      while $RUN
      do
      if [ -f /home/${NODE_USER}/tx-pool-cert.signed ]; then
          RUN=false
          echo "Found tx-pool-cert.signed! Continuing"
          sleep 2
      else
          sleep 2
      fi
      done
    fi

    if [ -f /home/${NODE_USER}/tx-pool-cert.signed ]; then
      doSubmitTransaction
    fi