- path: ${NODE_SCRIPTS_PATH}/init/registerPoolCertificate.sh
  permissions: "550"
  content: |
    #!/bin/bash

    outputMessageGenerateCertificates() {
    cat <<EOF

    Now create a pool certificate; you'll need to do this on your cold machine.

    1.) Download the files from /home/${NODE_USER}/step-3.zip to your cold environment.

    Inside will be the following files:
    - step-3.sh 

    2.) Move all the files into the directory you are generating your keys with.
    3.) Execute 'step-3.sh', this will create the pool certificate files.
    4.) Upload 'pool.cert' into /home/${NODE_USER}/

    EOF
    }
    
    completePoolCertificate(){
      if [ -f /home/${NODE_USER}/step-3.zip ]; then
        rm -rf /home/${NODE_USER}/step-3.zip
      fi

      echo "Found files pool.cert."
      mv /home/${NODE_USER}/pool.cert ${NODE_PRIVATE_PATH}/pool.cert 
    }
    
    if [ -f ${NODE_PRIVATE_PATH}/pool.cert  ]; then
      return
    fi

    if [ -f /home/${NODE_USER}/pool.cert ]; then
      completePoolCertificate
      return
    fi

    if [ ! -f ${NODE_HOME}/poolMetaData.json ]; then
      return
    fi

    POOL_META_PUBLIC_URL=$(cat ${NODE_HOME}/.poolMetaUrl.txt)

    if [ -z $POOL_META_PUBLIC_URL ]; then
      echo "Missing pool meta public url"
      echo "Run ${NODE_SCRIPTS_PATH}/init/registerVerifyPoolMeta.sh"
      return
    fi


    POOL_PLEDGE_AMOUNT=""
    POOL_MARGIN=""
    POOL_RELAY_HOST_TYPE=""

    POOL_RELAY_HOST_1=""
    POOL_RELAY_HOST_2=""

    # Get the pledge amount
    RUN_POOL_PLEDGE_AMOUNT=true
    while $RUN_POOL_PLEDGE_AMOUNT
    do
    if [ -z $POOL_PLEDGE_AMOUNT ] || [[ $POOL_PLEDGE_AMOUNT -lt 0 ]]; then
      echo "Enter pledge amount. Enter this in lovelace."
      read POOL_PLEDGE_AMOUNT

      confirmPledge="no"
      echo "You entered $POOL_PLEDGE_AMOUNT for your pledge. Are you sure? Type yes to proceed."
      read confirmPledge

      if [ $confirmPledge == "yes" ]; then 
        RUN_POOL_PLEDGE_AMOUNT=false
      fi
    fi 
    done


    # Get the pool margin
    RUN_POOL_MARGIN=true
    while $RUN_POOL_MARGIN
    do
    if [ ! -z $POOL_MARGIN ]; then
      RUN_POOL_MARGIN=false
    else 
      echo "Enter pool margin. Number must be between 0 and 1. Example: 0.15."
      read POOL_MARGIN
    fi 
    done

    # Get the pool host type
    RUN_POOL_RELAY_HOST_TYPE=true
    while $RUN_POOL_RELAY_HOST_TYPE
    do
    if [ ! -z $POOL_RELAY_HOST_TYPE ]; then
      if [ ! $POOL_RELAY_HOST_TYPE == "dns" ] || [ ! $POOL_RELAY_HOST_TYPE == "ip" ]; then
        RUN_POOL_RELAY_HOST_TYPE=false
      fi
    else 
      echo "Are you going to run the pool relays using IP addresses or DNS? Enter ip or dns. Default is ip."
      read $POOL_RELAY_HOST_TYPE

      if [ -z $POOL_RELAY_HOST_TYPE ]; then 
        POOL_RELAY_HOST_TYPE="ip"
      fi 
    fi 
    done

    questionMessage="Enter relay IP"
    if [ $POOL_RELAY_HOST_TYPE == "dns" ]; then
      questionMessage="Enter relay hostname. Example: relay1.example.com"
    fi

    # Get the pool host
    RUN_POOL_RELAY_HOST_1=true
    while $RUN_POOL_RELAY_HOST_1
    do
    if [ ! -z $POOL_RELAY_HOST_1 ]; then
      RUN_POOL_RELAY_HOST_1=false
    else 
      echo "$questionMessage 1"
      read POOL_RELAY_HOST_1
    fi 
    done

    echo "$questionMessage 2, or press enter to proceed with one."
    read POOL_RELAY_HOST_2

    if [ $POOL_RELAY_HOST_TYPE == "ip" ]; then
      . ${NODE_SCRIPTS_PATH}/updateConfigIP.sh "add" $POOL_RELAY_HOST_1
    fi 

    if [ $POOL_RELAY_HOST_TYPE == "ip" ] && [ ! -z $POOL_RELAY_HOST_2 ]; then
      . ${NODE_SCRIPTS_PATH}/updateConfigIP.sh "add" $POOL_RELAY_HOST_2
    fi 

    hostPrefix="--pool-relay-ipv4"
    if [ $POOL_RELAY_HOST_TYPE == "dns" ]; then
    hostPrefix="--single-host-pool-relay"
    fi

    relays="$hostPrefix $POOL_RELAY_HOST_1 \\
          --pool-relay-port ${NODE_PORT} \\"

    if [ ! -z $POOL_RELAY_HOST_2 ]; then
    relays+="
          $hostPrefix $POOL_RELAY_HOST_2 \\
          --pool-relay-port ${NODE_PORT} \\"
    fi


    currentPoolMetaHash=$( cardano-cli stake-pool metadata-hash --pool-metadata-file ${NODE_HOME}/poolMetaData.json )

    # Generate file to download and run on cold machine
    if [ ! -f /home/${NODE_USER}/step-3.sh ]; then
      cat > /home/${NODE_USER}/step-3.sh << EOF 
        #!/bin/bash
        cardano-cli stake-pool registration-certificate \\
          ${NODE_NETWORK_FLAG} \\
          --cold-verification-key-file node.vkey \\
          --vrf-verification-key-file vrf.vkey \\
          --pool-pledge $POOL_PLEDGE_AMOUNT \\
          --pool-cost 345000000 \\
          --pool-margin $POOL_MARGIN \\
          --pool-reward-account-verification-key-file stake.vkey \\
          --pool-owner-stake-verification-key-file stake.vkey \\
          $relays
          --metadata-url $POOL_META_PUBLIC_URL \\
          --metadata-hash $currentPoolMetaHash \\
          --out-file pool.cert

        echo "Upload pool.cert into node /home/${NODE_USER}"
    EOF

      zip -q -j \
        /home/${NODE_USER}/step-3.zip \
        /home/${NODE_USER}/step-3.sh

      rm -rf /home/${NODE_USER}/step-3.sh
    fi

    outputMessageGenerateCertificates

    # Start loop waiting for files
    RUN=true
    while $RUN
    do
    if [ -f /home/${NODE_USER}/pool.cert ]; then
      completePoolCertificate
      RUN=false
    else
      sleep 2
    fi
    done
    # End loop waiting for files