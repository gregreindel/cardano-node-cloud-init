#cloud-config
# date: Tue Sep 28 16:36:07 CDT 2021
# node type: block
# network: testnet
# cardano-node version: 1.29.0

# Instructions: 
# 1.) Input this file into the user data field when creating the block server

repo_update: true
repo_upgrade: all

packages:
  - fail2ban
  - git
  - jq
  - zip
  - rsync
  - htop
  - curl
  - wget
  - net-tools

power_state:
  mode: reboot
  condition: True
users:
- name: cardano
  ssh-authorized-keys: ssh-rsa AAAAB3NzfdsfdsdfsaBHVh7R8FOM+bXOCRHjmfdsfdsfdsbuZSUpj6MjTTi41SfdspJhAgIy0TWPe5K/uQi/vYEplfdsURB8mk67clc7K4EIvlEMN/R6IwxeQA5xy6J4OSGM/sdfff3BjUT1MAfIJWa869jyTPQm9veITvTZrv1/sdffdsU30+tX0GXdNr6zLhB2TrEdYi9oszr0HZVmp/l1PZscwsdfOlNhLDDcIShbxl0ghYkGwz82/OtackTNEsfd7P5aR/N7w1yPa0ZfdsKh
  sudo: ["ALL=(ALL) NOPASSWD:ALL"]
  groups: sudo
  shell: /bin/bash

write_files:
- path: /etc/ssh/sshd_config
  content: |
    Port 22
    Protocol 2
    HostKey /etc/ssh/ssh_host_rsa_key
    HostKey /etc/ssh/ssh_host_dsa_key
    HostKey /etc/ssh/ssh_host_ecdsa_key
    HostKey /etc/ssh/ssh_host_ed25519_key
    UsePrivilegeSeparation yes
    KeyRegenerationInterval 3600
    ServerKeyBits 1024
    SyslogFacility AUTH
    LogLevel INFO
    LoginGraceTime 120
    PermitRootLogin no
    StrictModes yes
    RSAAuthentication yes
    PubkeyAuthentication yes
    IgnoreRhosts yes
    RhostsRSAAuthentication no
    HostbasedAuthentication no
    PermitEmptyPasswords no
    ChallengeResponseAuthentication no
    X11Forwarding yes
    X11DisplayOffset 10
    PrintMotd no
    PrintLastLog yes
    TCPKeepAlive yes
    AcceptEnv LANG LC_*
    Subsystem sftp /usr/lib/openssh/sftp-server
    UsePAM yes
    AllowUsers cardano

- path: /run/tmp/.environment.sh
  permissions: "750"
  content: |
    alias start="sudo systemctl start cardano-node"
    alias stop="sudo systemctl stop cardano-node"
    alias status="sudo systemctl status cardano-node"
    alias restart="sudo systemctl restart cardano-node"
    alias logs="journalctl --unit=cardano-node --follow"
    alias node="cd /opt/cardano-node"
    alias home="cd /home/cardano"
    alias view=". /opt/cardano-node/scripts/liveView.sh"

    export NODE_TYPE=block
    export NODE_NETWORK=testnet
    export NODE_NETWORK_FLAG='--testnet-magic 1097911063'
    export NODE_PORT=6000
    export NODE_DB_PATH=/opt/cardano-node/db
    export NODE_HOME=/opt/cardano-node
    export NODE_CONFIG_PATH=/opt/cardano-node/config
    export NODE_SOCKET_PATH=/opt/cardano-node/db/socket
    export NODE_PRIVATE_PATH=/opt/cardano-node/private
    export NODE_SCRIPTS_PATH=/opt/cardano-node/scripts
    export NODE_VERSION=1.29.0
    export CARDANO_NODE_SOCKET_PATH=/opt/cardano-node/db/socket
    export CONFIG_TOPOLOGY=/opt/cardano-node/config/testnet-topology.json
    export CONFIG_CONFIG=/opt/cardano-node/config/testnet-config.json
    export CONFIG_SHELLY=/opt/cardano-node/config/testnet-shelley-genesis.json
    export CONFIG_BYRON=/opt/cardano-node/config/testnet-byron-genesis.json
    export CONFIG_ALONZO=/opt/cardano-node/config/testnet-alonzo-genesis.json

- path: /opt/cardano-node/.config.json
  permissions: "750"
  content: |
    { "extraParameters": "" }
- path: /etc/systemd/system/cardano-node.service
  permissions: "550"
  content: |
    [Unit]
    Description     = Cardano node service
    Wants           = network-online.target
    After           = network-online.target 

    [Service]
    User            = cardano
    Type            = simple
    WorkingDirectory= /opt/cardano-node
    ExecStart       = /bin/bash -c '/opt/cardano-node/scripts/startNode.sh'
    KillSignal=SIGINT
    RestartKillSignal=SIGINT
    TimeoutStopSec=2
    LimitNOFILE=32768
    Restart=always
    RestartSec=5
    SyslogIdentifier=cardano-node

    [Install]
    WantedBy	= multi-user.target

- path: /opt/cardano-node/scripts/startNode.sh
  permissions: "550"
  content: |
    #!/bin/bash
    /usr/local/bin/cardano-node $(cat /opt/cardano-node/.config.json | jq -r '.extraParameters') run --topology /opt/cardano-node/config/testnet-topology.json --database-path /opt/cardano-node/db --socket-path /opt/cardano-node/db/socket --host-addr 0.0.0.0 --port 6000 --config /opt/cardano-node/config/testnet-config.json

- path: /etc/fail2ban/jail.local
  permissions: "550"
  content: |
    [sshd]
    enabled = true
    port = 22
    filter = sshd
    logpath = /var/log/auth.log
    maxretry = 3
    # ignoreip = <list of whitelisted IP address>
- path: /opt/cardano-node/scripts/liveView.sh
  permissions: "550"
  content: |
    #!/bin/bash

    # Original courtesy of Adam Dean | https://crypto2099.io | BUFFY | SPIKE
    promport=12798
    refreshrate=2
    cardanoport=6000
    nodename=""

    version=$("$(command -v cardano-node)" version)
    node_version=$(grep -oP '(?<=cardano-node )[0-9\.]+' <<< "${version}")
    node_rev=$(grep -oP '(?<=rev )[a-z0-9]+' <<< "${version}" | cut -c1-8)

    node_version=$(printf "%14s" "$node_version")
    node_rev=$(printf "%14s" "$node_rev")
    name=$(printf "%*s\n" $((36)) "$nodename")

    # Version check courtesy of Martin [ATADA]
    versionCheck() { printf '%s\n%s' "${1}" "${2}" | sort -C -V; } #$1=minimal_needed_version, $2=current_node_version

    # Add some colors
    REKT='\033[1;31m'
    GOOD='\033[0;32m'
    NC='\033[0m'
    INFO='\033[1;34m'

    while true
    do
      data=$(curl localhost:$promport/metrics 2>/dev/null)
      remotepeers=$(netstat -an|awk "\$4 ~ /${cardanoport}/"|grep -c ESTABLISHED)

      uptimens=$(grep -oP '(?<=rts_gc_wall_ms )[0-9]+' <<< "${data}")
      transactions=$(grep -oP '(?<=cardano_node_metrics_txsProcessedNum_int )[0-9]+' <<< "${data}")
      isleader=$(grep -oP '(?<=cardano_node_metrics_Forge_node_is_leader_int )[0-9]+' <<< "${data}")
      abouttolead=$(grep -oP '(?<=cardano_node_metrics_Forge_forge_about_to_lead_int )[0-9]+' <<< "${data}")
      forged=$(grep -oP '(?<=cardano_node_metrics_Forge_forged_int )[0-9]+' <<< "${data}")

      versionCheck '1.25.0' $node_version

      if [[ $? -ne 0 ]]; then
        peers=$(grep -oP '(?<=cardano_node_BlockFetchDecision_peers_connectedPeers_int )[0-9]+' <<< "${data}")
        blocknum=$(grep -oP '(?<=cardano_node_ChainDB_metrics_blockNum_int )[0-9]+' <<< "${data}")
        epochnum=$(grep -oP '(?<=cardano_node_ChainDB_metrics_epoch_int )[0-9]+' <<< "${data}")
        slotnum=$(grep -oP '(?<=cardano_node_ChainDB_metrics_slotNum_int )[0-9]+' <<< "${data}")
        density=$(grep -oP '(?<=cardano_node_ChainDB_metrics_density_real )[0-9e\.\-]+' <<< "${data}")
        kesperiod=$(grep -oP '(?<=cardano_node_Forge_metrics_currentKESPeriod_int )[0-9]+' <<< "${data}")
        kesremain=$(grep -oP '(?<=cardano_node_Forge_metrics_remainingKESPeriods_int )[0-9]+' <<< "${data}")
      else
        peers=$(grep -oP '(?<=cardano_node_metrics_connectedPeers_int )[0-9]+' <<< "${data}")
        blocknum=$(grep -oP '(?<=cardano_node_metrics_blockNum_int )[0-9]+' <<< "${data}")
        epochnum=$(grep -oP '(?<=cardano_node_metrics_epoch_int )[0-9]+' <<< "${data}")
        slotnum=$(grep -oP '(?<=cardano_node_metrics_slotNum_int )[0-9]+' <<< "${data}")
        density=$(grep -oP '(?<=cardano_node_metrics_density_real )[0-9e\.\-]+' <<< "${data}")
        kesperiod=$(grep -oP '(?<=cardano_node_metrics_currentKESPeriod_int )[0-9]+' <<< "${data}")
        kesremain=$(grep -oP '(?<=cardano_node_metrics_remainingKESPeriods_int )[0-9]+' <<< "${data}")
      fi;


      if ((uptimens<=0)); then
        echo -e "${REKT}COULD NOT CONNECT TO A RUNNING INSTANCE${NC}"
        return
      fi

    #  remotepeers=$(printf "%14s" "$remotepeers")
      peers=$(printf "%14s" "$peers / $remotepeers")
      epoch=$(printf "%14s" "$epochnum / $blocknum")
      slot=$(printf "%14s" "$slotnum")
      txcount=$(printf "%14s" "$transactions")
      density_science=$(printf "%14s" "${density}")
      density_float=$(printf "%.4f" "${density}")
      density_percent=$(bc <<< "${density_float}*100")
      real_density=$(printf "%.3f" "${density_percent}")
      density=$(printf "%13s%%" "${real_density}")

      if [[ isleader -lt 0 ]]; then
        isleader=0
        forged=0
      fi

      uptimes=$(($uptimens / 1000))
      min=0
      hour=0
      day=0
      if(($uptimes > 59)); then
        ((sec=$uptimes%60))
        ((uptimes=$uptimes/60))
        if(($uptimes > 59)); then
          ((min=$uptimes%60))
          ((uptimes=$uptimes/60))
          if(($uptimes > 23)); then
            ((hour=$uptimes%24))
            ((day=$uptimes/24))
          else
            ((hour=$uptimes))
          fi
        else
          ((min=$uptimes))
        fi
      else
        ((sec=$uptimes))
      fi

      day=$(printf "%02d\n" "$day")
      hour=$(printf "%02d\n" "$hour")
      min=$(printf "%02d\n" "$min")
      sec=$(printf "%02d\n" "$sec")

      uptime=$(echo "$day":"$hour":"$min":"$sec")
      uptime=$(printf "%14s" "$uptime")

      clear
      if [[ ! -z "$nodename" ]]; then
        name=$(printf "%30s" "${nodename}")
        echo -e "| Name: ${INFO}${name}${NC} |"
        echo -e '+---------------------+----------------+'
      fi
      echo -e "| Version             | ${INFO}${node_version}${NC} |"
      echo -e '+---------------------+----------------+'
      echo -e "| Revision            | ${INFO}${node_rev}${NC} |"
      echo -e '+---------------------+----------------+'
      echo -e "| Peers (Out / In)    | ${peers} |"
      echo -e "+---------------------+----------------+"
      echo -e "| Epoch / Block       | ${epoch} |"
      echo -e '+---------------------+----------------+'
      echo -e "| Slot                | ${slot} |"
      echo -e '+---------------------+----------------+'
      echo -e "| Uptime (D:H:M:S)    | ${uptime} |"
      echo -e '+---------------------+----------------+'
      echo -e "| Transactions        | ${txcount} |"
      echo -e '+---------------------+----------------+'
      echo -e "| Chain Density       | ${density} |"
      echo -e '+---------------------+----------------+'
      if [[ $abouttolead -gt 0 ]]; then
        kesperiod=$(printf "%14s" "$kesperiod")
        kesremain=$(printf "%14s" "$kesremain")
        isleader=$(printf "%14s" "$isleader")
        forged=$(printf "%14s" "$forged")
        echo -e "|  ${GOOD}RUNNING IN BLOCK PRODUCER MODE! :)${NC}  |"
        echo -e "+---------------------+----------------+"
        echo -e "| KES PERIOD          | ${kesperiod} |"
        echo -e "+---------------------+----------------+"
        echo -e "| KES REMAINING       | ${kesremain} |"
        echo -e "+---------------------+----------------+"
        echo -e "| SLOTS LED           | ${isleader} |"
        echo -e "+---------------------+----------------+"
        echo -e "| BLOCKS FORGED       | ${forged} |"
        echo -e "+---------------------+----------------+"
      else
        echo -e "|  ${REKT}NOT A BLOCK PRODUCER! RELAY ONLY!${NC}   |"
        echo -e '+--------------------------------------+'
      fi
      echo -e "\n${INFO}Press [CTRL+C] to stop...${NC}"
      sleep $refreshrate
    done

runcmd:
- mkdir -p /opt/cardano-node /opt/cardano-node/config /opt/cardano-node/private /opt/cardano-node/scripts
- wget -O /opt/cardano-node/config/testnet-byron-genesis.json https://hydra.iohk.io/build/7578887/download/1/testnet-byron-genesis.json
- wget -O /opt/cardano-node/config/testnet-topology.json https://hydra.iohk.io/build/7578887/download/1/testnet-topology.json
- wget -O /opt/cardano-node/config/testnet-shelley-genesis.json https://hydra.iohk.io/build/7578887/download/1/testnet-shelley-genesis.json
- wget -O /opt/cardano-node/config/testnet-alonzo-genesis.json https://hydra.iohk.io/build/7578887/download/1/testnet-alonzo-genesis.json
- wget -O /opt/cardano-node/config/testnet-config.json https://hydra.iohk.io/build/7578887/download/1/testnet-config.json
# Download the compiled cardano-node for linux x86. Save to /tmp
- wget -N https://hydra.iohk.io/build/7408438/download/1/cardano-node-1.29.0-linux.tar.gz -P /tmp

# Make directory to extract into
- mkdir /tmp/binaries-1.29.0

# Extract
- tar -C /tmp/binaries-1.29.0 -zxvf /tmp/cardano-node-1.29.0-linux.tar.gz

# Remove the tar.gz
- rm /tmp/cardano-node-1.29.0-linux.tar.gz

# Copy binaries into /usr/local/bin
- cp /tmp/binaries-1.29.0/cardano-node /usr/local/bin/cardano-node
- cp /tmp/binaries-1.29.0/cardano-cli /usr/local/bin/cardano-cli

# Make the binaries executable
- chmod +x /usr/local/bin/cardano-node
- chmod +x /usr/local/bin/cardano-cli

# Change permissions
- chown cardano:cardano /usr/local/bin/cardano-node
- chown cardano:cardano /usr/local/bin/cardano-cli

# Clean up
- rm -rf /tmp/binaries-1.29.0
- echo -e "tmpfs /run/shm tmpfs ro,noexec,nosuid 0 0\n" >> /etc/fstab

- sed -i /opt/cardano-node/config/testnet-config.json -e "s#TraceBlockFetchDecisions\":\ false#TraceBlockFetchDecisions\":\ true#g"
- sudo chown cardano:cardano /opt/cardano-node -R
- sudo mv /run/tmp/.environment.sh /home/cardano/.environment.sh
- sudo chown cardano:cardano /home/cardano -R
- echo "source .environment.sh" >> /home/cardano/.bashrc
- sudo ufw default deny incoming
- sudo ufw default allow outgoing
- sudo ufw allow 22/tcp
- sudo ufw enable
- sudo systemctl daemon-reload
- sudo systemctl restart fail2ban
# TODO: Can't use `systemctl enable` on google cloud
- sudo systemctl enable cardano-node

